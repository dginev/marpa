// The code after this line was automatically generated by meta/slif_to_rust.pl
// Date: Mon Feb 11 21:35:40 2019
use std::collections::{HashMap};

#[macro_export]
macro_rules! map {
  ($( $key:literal ==> $val:expr ),*) => {{
    let mut map = ::std::collections::HashMap::new();
    $( map.insert($key, $val); )*
    map
  }}
}

/// An auto-generated rule, part of the SLIF-recognizing meta grammar
pub struct MetaRecceRule {
   pub action: &'static str,
   pub bless:  &'static str,
   pub lhs:  &'static str,
   pub mask: Vec<bool>,
   pub name:  &'static str,
   pub rhs: Vec<&'static str>,
   pub min: Option<usize>,
   pub proper: &'static str,
   pub separator: &'static str,
   pub description: &'static str,
   pub symbol_as_event: &'static str,
}

/// An auto-generated symbol, part of the SLIF-recognizing meta grammar
pub struct MetaRecceSymbol { 
    pub description: &'static str,
    pub display_form: &'static str,
    pub dsl_form: &'static str,
}

/// An auto-generated struct representing the SLIF-recognizing meta grammar
pub struct MetaRecce { 
    pub character_classes: HashMap<&'static str, Vec<&'static str>>,
    pub discard_default_adverbs: bool,
    pub first_lhs: &'static str,
    pub start_lhs: &'static str,
    pub lexeme_default_adverbs: HashMap<&'static str, &'static str>,
    pub rules_g1: Vec<MetaRecceRule>,
    pub rules_l0: Vec<MetaRecceRule>,
    pub symbols_g1: HashMap<&'static str, MetaRecceSymbol>,
    pub symbols_l0: HashMap<&'static str, MetaRecceSymbol>,
}

/// Generates a new MetaG instance in turn used to parse SLIF sources
pub fn hashed_grammar() -> MetaRecce {
    MetaRecce {
        character_classes: map!(
          "[[']]" ==> vec!["[']",""],
          "[[+-]]" ==> vec!["[+-]",""],
          "[[,]]" ==> vec!["[,]",""],
          "[[01]]" ==> vec!["[01]",""],
          "[[1]]" ==> vec!["[1]",""],
          "[[[:alnum:]]]" ==> vec!["[[:alnum:]]",""],
          "[[\\#]]" ==> vec!["[\\#]",""],
          "[[\\(]]" ==> vec!["[\\(]",""],
          "[[\\)]]" ==> vec!["[\\)]",""],
          "[[\\*]]" ==> vec!["[\\*]",""],
          "[[\\+]]" ==> vec!["[\\+]",""],
          "[[\\,]]" ==> vec!["[\\,]",""],
          "[[\\-]]" ==> vec!["[\\-]",""],
          "[[\\:]]" ==> vec!["[\\:]",""],
          "[[\\;]]" ==> vec!["[\\;]",""],
          "[[\\<]]" ==> vec!["[\\<]",""],
          "[[\\=]]" ==> vec!["[\\=]",""],
          "[[\\>]]" ==> vec!["[\\>]",""],
          "[[\\[]]" ==> vec!["[\\[]",""],
          "[[\\\\]]" ==> vec!["[\\\\]",""],
          "[[\\]]]" ==> vec!["[\\]]",""],
          "[[\\^]]" ==> vec!["[\\^]",""],
          "[[\\d]]" ==> vec!["[\\d]",""],
          "[[\\s\\w]]" ==> vec!["[\\s\\w]",""],
          "[[\\s]]" ==> vec!["[\\s]",""],
          "[[\\w]]" ==> vec!["[\\w]",""],
          "[[\\u{A}\\u{B}\\u{C}\\u{D}\\u{2028}\\u{2029}]]" ==> vec!["[\\u{A}\\u{B}\\u{C}\\u{D}\\u{2028}\\u{2029}]",""],
          "[[\\{]]" ==> vec!["[\\{]",""],
          "[[\\|]]" ==> vec!["[\\|]",""],
          "[[\\}]]" ==> vec!["[\\}]",""],
          "[[\\~]]" ==> vec!["[\\~]",""],
          "[[^'\\u{0A}\\u{0B}\\u{0C}\\u{0D}\\u{0085}\\u{2028}\\u{2029}]]" ==> vec!["[^'\\u{0A}\\u{0B}\\u{0C}\\u{0D}\\u{0085}\\u{2028}\\u{2029}]",""],
          "[[^\\u{5d}\\u{0A}\\u{0B}\\u{0C}\\u{0D}\\u{0085}\\u{2028}\\u{2029}]]" ==> vec!["[^\\u{5d}\\u{0A}\\u{0B}\\u{0C}\\u{0D}\\u{0085}\\u{2028}\\u{2029}]",""],
          "[[^\\u{A}\\u{B}\\u{C}\\u{D}\\u{2028}\\u{2029}]]" ==> vec!["[^\\u{A}\\u{B}\\u{C}\\u{D}\\u{2028}\\u{2029}]",""],
          "[[a-zA-Z]]" ==> vec!["[a-zA-Z]",""],
          "[[a]]" ==> vec!["[a]",""],
          "[[b]]" ==> vec!["[b]",""],
          "[[c]]" ==> vec!["[c]",""],
          "[[d]]" ==> vec!["[d]",""],
          "[[e]]" ==> vec!["[e]",""],
          "[[f]]" ==> vec!["[f]",""],
          "[[g]]" ==> vec!["[g]",""],
          "[[h]]" ==> vec!["[h]",""],
          "[[i]]" ==> vec!["[i]",""],
          "[[k]]" ==> vec!["[k]",""],
          "[[l]]" ==> vec!["[l]",""],
          "[[m]]" ==> vec!["[m]",""],
          "[[n]]" ==> vec!["[n]",""],
          "[[o]]" ==> vec!["[o]",""],
          "[[p]]" ==> vec!["[p]",""],
          "[[r]]" ==> vec!["[r]",""],
          "[[s]]" ==> vec!["[s]",""],
          "[[t]]" ==> vec!["[t]",""],
          "[[u]]" ==> vec!["[u]",""],
          "[[v]]" ==> vec!["[v]",""],
          "[[w]]" ==> vec!["[w]",""],
          "[[x]]" ==> vec!["[x]",""],
          "[[y]]" ==> vec!["[y]",""]
          ),
        discard_default_adverbs: false,
        first_lhs: "statements",
        lexeme_default_adverbs: map!(
          "action" ==> "[start,length,value]",
          "bless" ==> "::name",
          "latm" ==> "1"
          ),
        rules_g1: vec![
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "action",
                lhs: "action",
                mask: vec![],
                name: "action",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "action_name",
                lhs: "action name",
                mask: vec![],
                name: "action name",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "action_name",
                lhs: "action name",
                mask: vec![],
                name: "action name",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "action_name",
                lhs: "action name",
                mask: vec![],
                name: "action name",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "adverb_item",
                lhs: "adverb item",
                mask: vec![],
                name: "adverb item",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "adverb_item",
                lhs: "adverb item",
                mask: vec![],
                name: "adverb item",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "adverb_item",
                lhs: "adverb item",
                mask: vec![],
                name: "adverb item",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "adverb_item",
                lhs: "adverb item",
                mask: vec![],
                name: "adverb item",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "adverb_item",
                lhs: "adverb item",
                mask: vec![],
                name: "adverb item",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "adverb_item",
                lhs: "adverb item",
                mask: vec![],
                name: "adverb item",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "adverb_item",
                lhs: "adverb item",
                mask: vec![],
                name: "adverb item",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "adverb_item",
                lhs: "adverb item",
                mask: vec![],
                name: "adverb item",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "adverb_item",
                lhs: "adverb item",
                mask: vec![],
                name: "adverb item",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "adverb_item",
                lhs: "adverb item",
                mask: vec![],
                name: "adverb item",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "adverb_item",
                lhs: "adverb item",
                mask: vec![],
                name: "adverb item",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "adverb_item",
                lhs: "adverb item",
                mask: vec![],
                name: "adverb item",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "adverb_item",
                lhs: "adverb item",
                mask: vec![],
                name: "adverb item",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "adverb_item",
                lhs: "adverb item",
                mask: vec![],
                name: "adverb item",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "adverb_item",
                lhs: "adverb item",
                mask: vec![],
                name: "adverb item",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "adverb_list",
                lhs: "adverb list",
                mask: vec![],
                name: "adverb list",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "adverb_list_items",
                lhs: "adverb list items",
                mask: vec![],
                name: "adverb list items",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "alternative",
                lhs: "alternative",
                mask: vec![],
                name: "alternative",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "alternative_name",
                lhs: "alternative name",
                mask: vec![],
                name: "alternative name",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "alternative_name",
                lhs: "alternative name",
                mask: vec![],
                name: "alternative name",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "alternatives",
                lhs: "alternatives",
                mask: vec![],
                name: "alternatives",
                rhs: vec![],
                min: Some(1),
                proper: "1",
                separator: "op equal priority",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "blessing",
                lhs: "blessing",
                mask: vec![],
                name: "blessing",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "blessing_name",
                lhs: "blessing name",
                mask: vec![],
                name: "blessing name",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "blessing_name",
                lhs: "blessing name",
                mask: vec![],
                name: "blessing name",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "completion_event_declaration",
                lhs: "completion event declaration",
                mask: vec![],
                name: "completion event declaration",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "current_lexer_statement",
                lhs: "current lexer statement",
                mask: vec![],
                name: "current lexer statement",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "default_rule",
                lhs: "default rule",
                mask: vec![],
                name: "default rule",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "discard_default_statement",
                lhs: "discard default statement",
                mask: vec![],
                name: "discard default statement",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "discard_rule",
                lhs: "discard rule",
                mask: vec![],
                name: "discard rule",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "empty_rule",
                lhs: "empty rule",
                mask: vec![],
                name: "empty rule",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "event_initialization",
                lhs: "event initialization",
                mask: vec![],
                name: "event initialization",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "event_initializer",
                lhs: "event initializer",
                mask: vec![],
                name: "event initializer",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Empty rule for <event initializer>",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "event_initializer",
                lhs: "event initializer",
                mask: vec![],
                name: "event initializer",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "event_name",
                lhs: "event name",
                mask: vec![],
                name: "event name",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "event_name",
                lhs: "event name",
                mask: vec![],
                name: "event name",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "event_name",
                lhs: "event name",
                mask: vec![],
                name: "event name",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "event_specification",
                lhs: "event specification",
                mask: vec![],
                name: "event specification",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "group_association",
                lhs: "group association",
                mask: vec![],
                name: "group association",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "inaccessible_statement",
                lhs: "inaccessible statement",
                mask: vec![],
                name: "inaccessible statement",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "inaccessible_treatment",
                lhs: "inaccessible treatment",
                mask: vec![],
                name: "inaccessible treatment",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "inaccessible_treatment",
                lhs: "inaccessible treatment",
                mask: vec![],
                name: "inaccessible treatment",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "inaccessible_treatment",
                lhs: "inaccessible treatment",
                mask: vec![],
                name: "inaccessible treatment",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "latm_specification",
                lhs: "latm specification",
                mask: vec![],
                name: "latm specification",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "latm_specification",
                lhs: "latm specification",
                mask: vec![],
                name: "latm specification",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "left_association",
                lhs: "left association",
                mask: vec![],
                name: "left association",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "lexeme_default_statement",
                lhs: "lexeme default statement",
                mask: vec![],
                name: "lexeme default statement",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "lexeme_rule",
                lhs: "lexeme rule",
                mask: vec![],
                name: "lexeme rule",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "lexer_name",
                lhs: "lexer name",
                mask: vec![],
                name: "lexer name",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "lexer_name",
                lhs: "lexer name",
                mask: vec![],
                name: "lexer name",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "lhs",
                lhs: "lhs",
                mask: vec![],
                name: "lhs",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "naming",
                lhs: "naming",
                mask: vec![],
                name: "naming",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "null_adverb",
                lhs: "null adverb",
                mask: vec![],
                name: "null adverb",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "null_ranking_constant",
                lhs: "null ranking constant",
                mask: vec![],
                name: "null ranking constant",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "null_ranking_constant",
                lhs: "null ranking constant",
                mask: vec![],
                name: "null ranking constant",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "null_ranking_specification",
                lhs: "null ranking specification",
                mask: vec![],
                name: "null ranking specification",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "null_ranking_specification",
                lhs: "null ranking specification",
                mask: vec![],
                name: "null ranking specification",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "null_statement",
                lhs: "null statement",
                mask: vec![],
                name: "null statement",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "nulled_event_declaration",
                lhs: "nulled event declaration",
                mask: vec![],
                name: "nulled event declaration",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "on_or_off",
                lhs: "on or off",
                mask: vec![],
                name: "on or off",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "on_or_off",
                lhs: "on or off",
                mask: vec![],
                name: "on or off",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "op_declare",
                lhs: "op declare",
                mask: vec![],
                name: "op declare",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "op_declare",
                lhs: "op declare",
                mask: vec![],
                name: "op declare",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "parenthesized_rhs_primary_list",
                lhs: "parenthesized rhs primary list",
                mask: vec![],
                name: "parenthesized rhs primary list",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "pause_specification",
                lhs: "pause specification",
                mask: vec![],
                name: "pause specification",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "prediction_event_declaration",
                lhs: "prediction event declaration",
                mask: vec![],
                name: "prediction event declaration",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "priorities",
                lhs: "priorities",
                mask: vec![],
                name: "priorities",
                rhs: vec![],
                min: Some(1),
                proper: "1",
                separator: "op loosen",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "priority_rule",
                lhs: "priority rule",
                mask: vec![],
                name: "priority rule",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "priority_specification",
                lhs: "priority specification",
                mask: vec![],
                name: "priority specification",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "proper_specification",
                lhs: "proper specification",
                mask: vec![],
                name: "proper specification",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "quantified_rule",
                lhs: "quantified rule",
                mask: vec![],
                name: "quantified rule",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "quantifier",
                lhs: "quantifier",
                mask: vec![],
                name: "quantifier",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "quantifier",
                lhs: "quantifier",
                mask: vec![],
                name: "quantifier",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "rank_specification",
                lhs: "rank specification",
                mask: vec![],
                name: "rank specification",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "rhs",
                lhs: "rhs",
                mask: vec![],
                name: "rhs",
                rhs: vec![],
                min: Some(1),
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "rhs_primary",
                lhs: "rhs primary",
                mask: vec![],
                name: "rhs primary",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "rhs_primary",
                lhs: "rhs primary",
                mask: vec![],
                name: "rhs primary",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "rhs_primary",
                lhs: "rhs primary",
                mask: vec![],
                name: "rhs primary",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "rhs_primary_list",
                lhs: "rhs primary list",
                mask: vec![],
                name: "rhs primary list",
                rhs: vec![],
                min: Some(1),
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "right_association",
                lhs: "right association",
                mask: vec![],
                name: "right association",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "separator_specification",
                lhs: "separator specification",
                mask: vec![],
                name: "separator specification",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "single_symbol",
                lhs: "single symbol",
                mask: vec![],
                name: "single symbol",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "single_symbol",
                lhs: "single symbol",
                mask: vec![],
                name: "single symbol",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "start_rule",
                lhs: "start rule",
                mask: vec![],
                name: "start rule",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "start_rule",
                lhs: "start rule",
                mask: vec![],
                name: "start rule",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "statement",
                lhs: "statement",
                mask: vec![],
                name: "statement",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "statement",
                lhs: "statement",
                mask: vec![],
                name: "statement",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "statement",
                lhs: "statement",
                mask: vec![],
                name: "statement",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "statement",
                lhs: "statement",
                mask: vec![],
                name: "statement",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "statement",
                lhs: "statement",
                mask: vec![],
                name: "statement",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "statement",
                lhs: "statement",
                mask: vec![],
                name: "statement",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "statement",
                lhs: "statement",
                mask: vec![],
                name: "statement",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "statement",
                lhs: "statement",
                mask: vec![],
                name: "statement",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "statement",
                lhs: "statement",
                mask: vec![],
                name: "statement",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "statement",
                lhs: "statement",
                mask: vec![],
                name: "statement",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "statement",
                lhs: "statement",
                mask: vec![],
                name: "statement",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "statement",
                lhs: "statement",
                mask: vec![],
                name: "statement",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "statement",
                lhs: "statement",
                mask: vec![],
                name: "statement",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "statement",
                lhs: "statement",
                mask: vec![],
                name: "statement",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "statement",
                lhs: "statement",
                mask: vec![],
                name: "statement",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "statement",
                lhs: "statement",
                mask: vec![],
                name: "statement",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "statement_group",
                lhs: "statement group",
                mask: vec![],
                name: "statement group",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "statements",
                lhs: "statements",
                mask: vec![],
                name: "statements",
                rhs: vec![],
                min: Some(1),
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "symbol",
                lhs: "symbol",
                mask: vec![],
                name: "symbol",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "symbol_name",
                lhs: "symbol name",
                mask: vec![],
                name: "symbol name",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "[start,length,values]",
                bless: "symbol_name",
                lhs: "symbol name",
                mask: vec![],
                name: "symbol name",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
        ],
        rules_l0: vec![
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "Perl identifier",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: Some(1),
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "Perl name",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: Some(1),
                proper: "1",
                separator: "double colon",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[:discard]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Discard rule for <hash comment>",
                symbol_as_event: "hash comment"
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[:discard]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Discard rule for <whitespace>",
                symbol_as_event: "whitespace"
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-0]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string ';'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-10]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string '='",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-11]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'discard'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-12]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'default'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-13]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string '='",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-14]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string ':discard'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-15]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string ':lexeme'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-16]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'event'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-17]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string '='",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-18]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'completed'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-19]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'event'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-1]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string '{'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-20]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string '='",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-21]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'nulled'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-22]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'event'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-23]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string '='",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-24]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'predicted'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-25]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'current'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-26]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'lexer'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-27]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'is'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-28]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'inaccessible'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-29]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'is'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-2]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string '}'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-30]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'by'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-31]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'default'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-32]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'warn'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-33]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'ok'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-34]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'fatal'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-35]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string ','",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-36]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'action'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-37]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string '=>'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-38]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'assoc'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-39]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string '=>'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-3]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string ':start'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-40]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'left'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-41]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'assoc'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-42]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string '=>'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-43]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'right'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-44]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'assoc'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-45]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string '=>'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-46]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'group'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-47]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'separator'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-48]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string '=>'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-49]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'proper'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-4]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'start'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-50]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string '=>'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-51]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'rank'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-52]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string '=>'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-53]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'null-ranking'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-54]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string '=>'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-55]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'null'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-56]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'rank'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-57]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string '=>'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-58]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'low'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-59]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'high'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-5]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'symbol'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-60]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'priority'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-61]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string '=>'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-62]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'pause'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-63]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string '=>'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-64]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'event'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-65]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string '=>'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-66]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string '='",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-67]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'on'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-68]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'off'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-69]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'forgiving'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-6]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'is'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-70]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string '=>'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-71]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'latm'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-72]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string '=>'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-73]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'bless'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-74]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string '=>'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-75]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'name'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-76]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string '=>'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-77]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string '('",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-78]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string ')'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-79]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string '*'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-7]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string ':default'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-80]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string '+'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-8]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'lexeme'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "[Lex-9]",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "Internal rule for single-quoted string 'default'",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "array descriptor",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "array descriptor left bracket",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "array descriptor left bracket",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "array descriptor right bracket",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "array descriptor right bracket",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "bare name",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: Some(1),
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "before or after",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "before or after",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "boolean",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "bracketed name",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "bracketed name string",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: Some(1),
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "cc element",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "cc element",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "cc element",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "cc element",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "cc elements",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: Some(1),
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "character class",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "character class modifier",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "character class modifier",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "character class modifiers",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "double colon",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "escaped cc character",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "hash comment",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "hash comment",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "hash comment body",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "hash comment char",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "horizontal character",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "integer",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: Some(1),
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "negated posix char class",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "one or more word characters",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: Some(1),
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "op declare bnf",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "op declare match",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "op equal priority",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "op loosen",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "posix char class",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "posix char class name",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: Some(1),
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "reserved action name",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "reserved blessing name",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "reserved event name",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "result item descriptor",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "result item descriptor",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "result item descriptor",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "result item descriptor",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "result item descriptor",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "result item descriptor",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "result item descriptor",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "result item descriptor",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "result item descriptor",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "result item descriptor",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "result item descriptor list",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "result item descriptor separator",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "result item descriptor separator",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "result item descriptor separator",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "safe cc character",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "sign",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "signed integer",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "signed integer",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "single quoted name",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "single quoted string",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "standard name",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "string without single quote or vertical space",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: Some(1),
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "terminated hash comment",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "unterminated final hash comment",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "vertical space char",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "whitespace",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: Some(1),
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
                MetaRecceRule {
                action: "",
                bless: "",
                lhs: "zero or more word characters",
                mask: vec![],
                name: "",
                rhs: vec![],
                min: None,
                proper: "",
                separator: "",
                description: "",
                symbol_as_event: ""
            },
        ],
        start_lhs: "statements",
        symbols_g1: map!(
                "[Lex-0]" ==> MetaRecceSymbol {
                     display_form: r#"';'"#,
                     dsl_form: r#"';'"#,
                     description: r#"Internal lexical symbol for "';'""#,
                },
                "[Lex-10]" ==> MetaRecceSymbol {
                     display_form: r#"'='"#,
                     dsl_form: r#"'='"#,
                     description: r#"Internal lexical symbol for "'='""#,
                },
                "[Lex-11]" ==> MetaRecceSymbol {
                     display_form: r#"'discard'"#,
                     dsl_form: r#"'discard'"#,
                     description: r#"Internal lexical symbol for "'discard'""#,
                },
                "[Lex-12]" ==> MetaRecceSymbol {
                     display_form: r#"'default'"#,
                     dsl_form: r#"'default'"#,
                     description: r#"Internal lexical symbol for "'default'""#,
                },
                "[Lex-13]" ==> MetaRecceSymbol {
                     display_form: r#"'='"#,
                     dsl_form: r#"'='"#,
                     description: r#"Internal lexical symbol for "'='""#,
                },
                "[Lex-14]" ==> MetaRecceSymbol {
                     display_form: r#"':discard'"#,
                     dsl_form: r#"':discard'"#,
                     description: r#"Internal lexical symbol for "':discard'""#,
                },
                "[Lex-15]" ==> MetaRecceSymbol {
                     display_form: r#"':lexeme'"#,
                     dsl_form: r#"':lexeme'"#,
                     description: r#"Internal lexical symbol for "':lexeme'""#,
                },
                "[Lex-16]" ==> MetaRecceSymbol {
                     display_form: r#"'event'"#,
                     dsl_form: r#"'event'"#,
                     description: r#"Internal lexical symbol for "'event'""#,
                },
                "[Lex-17]" ==> MetaRecceSymbol {
                     display_form: r#"'='"#,
                     dsl_form: r#"'='"#,
                     description: r#"Internal lexical symbol for "'='""#,
                },
                "[Lex-18]" ==> MetaRecceSymbol {
                     display_form: r#"'completed'"#,
                     dsl_form: r#"'completed'"#,
                     description: r#"Internal lexical symbol for "'completed'""#,
                },
                "[Lex-19]" ==> MetaRecceSymbol {
                     display_form: r#"'event'"#,
                     dsl_form: r#"'event'"#,
                     description: r#"Internal lexical symbol for "'event'""#,
                },
                "[Lex-1]" ==> MetaRecceSymbol {
                     display_form: r#"'{'"#,
                     dsl_form: r#"'{'"#,
                     description: r#"Internal lexical symbol for "'{'""#,
                },
                "[Lex-20]" ==> MetaRecceSymbol {
                     display_form: r#"'='"#,
                     dsl_form: r#"'='"#,
                     description: r#"Internal lexical symbol for "'='""#,
                },
                "[Lex-21]" ==> MetaRecceSymbol {
                     display_form: r#"'nulled'"#,
                     dsl_form: r#"'nulled'"#,
                     description: r#"Internal lexical symbol for "'nulled'""#,
                },
                "[Lex-22]" ==> MetaRecceSymbol {
                     display_form: r#"'event'"#,
                     dsl_form: r#"'event'"#,
                     description: r#"Internal lexical symbol for "'event'""#,
                },
                "[Lex-23]" ==> MetaRecceSymbol {
                     display_form: r#"'='"#,
                     dsl_form: r#"'='"#,
                     description: r#"Internal lexical symbol for "'='""#,
                },
                "[Lex-24]" ==> MetaRecceSymbol {
                     display_form: r#"'predicted'"#,
                     dsl_form: r#"'predicted'"#,
                     description: r#"Internal lexical symbol for "'predicted'""#,
                },
                "[Lex-25]" ==> MetaRecceSymbol {
                     display_form: r#"'current'"#,
                     dsl_form: r#"'current'"#,
                     description: r#"Internal lexical symbol for "'current'""#,
                },
                "[Lex-26]" ==> MetaRecceSymbol {
                     display_form: r#"'lexer'"#,
                     dsl_form: r#"'lexer'"#,
                     description: r#"Internal lexical symbol for "'lexer'""#,
                },
                "[Lex-27]" ==> MetaRecceSymbol {
                     display_form: r#"'is'"#,
                     dsl_form: r#"'is'"#,
                     description: r#"Internal lexical symbol for "'is'""#,
                },
                "[Lex-28]" ==> MetaRecceSymbol {
                     display_form: r#"'inaccessible'"#,
                     dsl_form: r#"'inaccessible'"#,
                     description: r#"Internal lexical symbol for "'inaccessible'""#,
                },
                "[Lex-29]" ==> MetaRecceSymbol {
                     display_form: r#"'is'"#,
                     dsl_form: r#"'is'"#,
                     description: r#"Internal lexical symbol for "'is'""#,
                },
                "[Lex-2]" ==> MetaRecceSymbol {
                     display_form: r#"'}'"#,
                     dsl_form: r#"'}'"#,
                     description: r#"Internal lexical symbol for "'}'""#,
                },
                "[Lex-30]" ==> MetaRecceSymbol {
                     display_form: r#"'by'"#,
                     dsl_form: r#"'by'"#,
                     description: r#"Internal lexical symbol for "'by'""#,
                },
                "[Lex-31]" ==> MetaRecceSymbol {
                     display_form: r#"'default'"#,
                     dsl_form: r#"'default'"#,
                     description: r#"Internal lexical symbol for "'default'""#,
                },
                "[Lex-32]" ==> MetaRecceSymbol {
                     display_form: r#"'warn'"#,
                     dsl_form: r#"'warn'"#,
                     description: r#"Internal lexical symbol for "'warn'""#,
                },
                "[Lex-33]" ==> MetaRecceSymbol {
                     display_form: r#"'ok'"#,
                     dsl_form: r#"'ok'"#,
                     description: r#"Internal lexical symbol for "'ok'""#,
                },
                "[Lex-34]" ==> MetaRecceSymbol {
                     display_form: r#"'fatal'"#,
                     dsl_form: r#"'fatal'"#,
                     description: r#"Internal lexical symbol for "'fatal'""#,
                },
                "[Lex-35]" ==> MetaRecceSymbol {
                     display_form: r#"','"#,
                     dsl_form: r#"','"#,
                     description: r#"Internal lexical symbol for "','""#,
                },
                "[Lex-36]" ==> MetaRecceSymbol {
                     display_form: r#"'action'"#,
                     dsl_form: r#"'action'"#,
                     description: r#"Internal lexical symbol for "'action'""#,
                },
                "[Lex-37]" ==> MetaRecceSymbol {
                     display_form: r#"'=>'"#,
                     dsl_form: r#"'=>'"#,
                     description: r#"Internal lexical symbol for "'=>'""#,
                },
                "[Lex-38]" ==> MetaRecceSymbol {
                     display_form: r#"'assoc'"#,
                     dsl_form: r#"'assoc'"#,
                     description: r#"Internal lexical symbol for "'assoc'""#,
                },
                "[Lex-39]" ==> MetaRecceSymbol {
                     display_form: r#"'=>'"#,
                     dsl_form: r#"'=>'"#,
                     description: r#"Internal lexical symbol for "'=>'""#,
                },
                "[Lex-3]" ==> MetaRecceSymbol {
                     display_form: r#"':start'"#,
                     dsl_form: r#"':start'"#,
                     description: r#"Internal lexical symbol for "':start'""#,
                },
                "[Lex-40]" ==> MetaRecceSymbol {
                     display_form: r#"'left'"#,
                     dsl_form: r#"'left'"#,
                     description: r#"Internal lexical symbol for "'left'""#,
                },
                "[Lex-41]" ==> MetaRecceSymbol {
                     display_form: r#"'assoc'"#,
                     dsl_form: r#"'assoc'"#,
                     description: r#"Internal lexical symbol for "'assoc'""#,
                },
                "[Lex-42]" ==> MetaRecceSymbol {
                     display_form: r#"'=>'"#,
                     dsl_form: r#"'=>'"#,
                     description: r#"Internal lexical symbol for "'=>'""#,
                },
                "[Lex-43]" ==> MetaRecceSymbol {
                     display_form: r#"'right'"#,
                     dsl_form: r#"'right'"#,
                     description: r#"Internal lexical symbol for "'right'""#,
                },
                "[Lex-44]" ==> MetaRecceSymbol {
                     display_form: r#"'assoc'"#,
                     dsl_form: r#"'assoc'"#,
                     description: r#"Internal lexical symbol for "'assoc'""#,
                },
                "[Lex-45]" ==> MetaRecceSymbol {
                     display_form: r#"'=>'"#,
                     dsl_form: r#"'=>'"#,
                     description: r#"Internal lexical symbol for "'=>'""#,
                },
                "[Lex-46]" ==> MetaRecceSymbol {
                     display_form: r#"'group'"#,
                     dsl_form: r#"'group'"#,
                     description: r#"Internal lexical symbol for "'group'""#,
                },
                "[Lex-47]" ==> MetaRecceSymbol {
                     display_form: r#"'separator'"#,
                     dsl_form: r#"'separator'"#,
                     description: r#"Internal lexical symbol for "'separator'""#,
                },
                "[Lex-48]" ==> MetaRecceSymbol {
                     display_form: r#"'=>'"#,
                     dsl_form: r#"'=>'"#,
                     description: r#"Internal lexical symbol for "'=>'""#,
                },
                "[Lex-49]" ==> MetaRecceSymbol {
                     display_form: r#"'proper'"#,
                     dsl_form: r#"'proper'"#,
                     description: r#"Internal lexical symbol for "'proper'""#,
                },
                "[Lex-4]" ==> MetaRecceSymbol {
                     display_form: r#"'start'"#,
                     dsl_form: r#"'start'"#,
                     description: r#"Internal lexical symbol for "'start'""#,
                },
                "[Lex-50]" ==> MetaRecceSymbol {
                     display_form: r#"'=>'"#,
                     dsl_form: r#"'=>'"#,
                     description: r#"Internal lexical symbol for "'=>'""#,
                },
                "[Lex-51]" ==> MetaRecceSymbol {
                     display_form: r#"'rank'"#,
                     dsl_form: r#"'rank'"#,
                     description: r#"Internal lexical symbol for "'rank'""#,
                },
                "[Lex-52]" ==> MetaRecceSymbol {
                     display_form: r#"'=>'"#,
                     dsl_form: r#"'=>'"#,
                     description: r#"Internal lexical symbol for "'=>'""#,
                },
                "[Lex-53]" ==> MetaRecceSymbol {
                     display_form: r#"'null-ranking'"#,
                     dsl_form: r#"'null-ranking'"#,
                     description: r#"Internal lexical symbol for "'null-ranking'""#,
                },
                "[Lex-54]" ==> MetaRecceSymbol {
                     display_form: r#"'=>'"#,
                     dsl_form: r#"'=>'"#,
                     description: r#"Internal lexical symbol for "'=>'""#,
                },
                "[Lex-55]" ==> MetaRecceSymbol {
                     display_form: r#"'null'"#,
                     dsl_form: r#"'null'"#,
                     description: r#"Internal lexical symbol for "'null'""#,
                },
                "[Lex-56]" ==> MetaRecceSymbol {
                     display_form: r#"'rank'"#,
                     dsl_form: r#"'rank'"#,
                     description: r#"Internal lexical symbol for "'rank'""#,
                },
                "[Lex-57]" ==> MetaRecceSymbol {
                     display_form: r#"'=>'"#,
                     dsl_form: r#"'=>'"#,
                     description: r#"Internal lexical symbol for "'=>'""#,
                },
                "[Lex-58]" ==> MetaRecceSymbol {
                     display_form: r#"'low'"#,
                     dsl_form: r#"'low'"#,
                     description: r#"Internal lexical symbol for "'low'""#,
                },
                "[Lex-59]" ==> MetaRecceSymbol {
                     display_form: r#"'high'"#,
                     dsl_form: r#"'high'"#,
                     description: r#"Internal lexical symbol for "'high'""#,
                },
                "[Lex-5]" ==> MetaRecceSymbol {
                     display_form: r#"'symbol'"#,
                     dsl_form: r#"'symbol'"#,
                     description: r#"Internal lexical symbol for "'symbol'""#,
                },
                "[Lex-60]" ==> MetaRecceSymbol {
                     display_form: r#"'priority'"#,
                     dsl_form: r#"'priority'"#,
                     description: r#"Internal lexical symbol for "'priority'""#,
                },
                "[Lex-61]" ==> MetaRecceSymbol {
                     display_form: r#"'=>'"#,
                     dsl_form: r#"'=>'"#,
                     description: r#"Internal lexical symbol for "'=>'""#,
                },
                "[Lex-62]" ==> MetaRecceSymbol {
                     display_form: r#"'pause'"#,
                     dsl_form: r#"'pause'"#,
                     description: r#"Internal lexical symbol for "'pause'""#,
                },
                "[Lex-63]" ==> MetaRecceSymbol {
                     display_form: r#"'=>'"#,
                     dsl_form: r#"'=>'"#,
                     description: r#"Internal lexical symbol for "'=>'""#,
                },
                "[Lex-64]" ==> MetaRecceSymbol {
                     display_form: r#"'event'"#,
                     dsl_form: r#"'event'"#,
                     description: r#"Internal lexical symbol for "'event'""#,
                },
                "[Lex-65]" ==> MetaRecceSymbol {
                     display_form: r#"'=>'"#,
                     dsl_form: r#"'=>'"#,
                     description: r#"Internal lexical symbol for "'=>'""#,
                },
                "[Lex-66]" ==> MetaRecceSymbol {
                     display_form: r#"'='"#,
                     dsl_form: r#"'='"#,
                     description: r#"Internal lexical symbol for "'='""#,
                },
                "[Lex-67]" ==> MetaRecceSymbol {
                     display_form: r#"'on'"#,
                     dsl_form: r#"'on'"#,
                     description: r#"Internal lexical symbol for "'on'""#,
                },
                "[Lex-68]" ==> MetaRecceSymbol {
                     display_form: r#"'off'"#,
                     dsl_form: r#"'off'"#,
                     description: r#"Internal lexical symbol for "'off'""#,
                },
                "[Lex-69]" ==> MetaRecceSymbol {
                     display_form: r#"'forgiving'"#,
                     dsl_form: r#"'forgiving'"#,
                     description: r#"Internal lexical symbol for "'forgiving'""#,
                },
                "[Lex-6]" ==> MetaRecceSymbol {
                     display_form: r#"'is'"#,
                     dsl_form: r#"'is'"#,
                     description: r#"Internal lexical symbol for "'is'""#,
                },
                "[Lex-70]" ==> MetaRecceSymbol {
                     display_form: r#"'=>'"#,
                     dsl_form: r#"'=>'"#,
                     description: r#"Internal lexical symbol for "'=>'""#,
                },
                "[Lex-71]" ==> MetaRecceSymbol {
                     display_form: r#"'latm'"#,
                     dsl_form: r#"'latm'"#,
                     description: r#"Internal lexical symbol for "'latm'""#,
                },
                "[Lex-72]" ==> MetaRecceSymbol {
                     display_form: r#"'=>'"#,
                     dsl_form: r#"'=>'"#,
                     description: r#"Internal lexical symbol for "'=>'""#,
                },
                "[Lex-73]" ==> MetaRecceSymbol {
                     display_form: r#"'bless'"#,
                     dsl_form: r#"'bless'"#,
                     description: r#"Internal lexical symbol for "'bless'""#,
                },
                "[Lex-74]" ==> MetaRecceSymbol {
                     display_form: r#"'=>'"#,
                     dsl_form: r#"'=>'"#,
                     description: r#"Internal lexical symbol for "'=>'""#,
                },
                "[Lex-75]" ==> MetaRecceSymbol {
                     display_form: r#"'name'"#,
                     dsl_form: r#"'name'"#,
                     description: r#"Internal lexical symbol for "'name'""#,
                },
                "[Lex-76]" ==> MetaRecceSymbol {
                     display_form: r#"'=>'"#,
                     dsl_form: r#"'=>'"#,
                     description: r#"Internal lexical symbol for "'=>'""#,
                },
                "[Lex-77]" ==> MetaRecceSymbol {
                     display_form: r#"'('"#,
                     dsl_form: r#"'('"#,
                     description: r#"Internal lexical symbol for "'('""#,
                },
                "[Lex-78]" ==> MetaRecceSymbol {
                     display_form: r#"')'"#,
                     dsl_form: r#"')'"#,
                     description: r#"Internal lexical symbol for "')'""#,
                },
                "[Lex-79]" ==> MetaRecceSymbol {
                     display_form: r#"'*'"#,
                     dsl_form: r#"'*'"#,
                     description: r#"Internal lexical symbol for "'*'""#,
                },
                "[Lex-7]" ==> MetaRecceSymbol {
                     display_form: r#"':default'"#,
                     dsl_form: r#"':default'"#,
                     description: r#"Internal lexical symbol for "':default'""#,
                },
                "[Lex-80]" ==> MetaRecceSymbol {
                     display_form: r#"'+'"#,
                     dsl_form: r#"'+'"#,
                     description: r#"Internal lexical symbol for "'+'""#,
                },
                "[Lex-8]" ==> MetaRecceSymbol {
                     display_form: r#"'lexeme'"#,
                     dsl_form: r#"'lexeme'"#,
                     description: r#"Internal lexical symbol for "'lexeme'""#,
                },
                "[Lex-9]" ==> MetaRecceSymbol {
                     display_form: r#"'default'"#,
                     dsl_form: r#"'default'"#,
                     description: r#"Internal lexical symbol for "'default'""#,
                }
        ),
        symbols_l0: map!(
                "[:discard]" ==> MetaRecceSymbol {
                     display_form: r#":discard"#,
                     dsl_form: r#""#,
                     description: r#"Internal LHS for lexer "L0" discard"#,
                },
                "[Lex-0]" ==> MetaRecceSymbol {
                     display_form: r#"';'"#,
                     dsl_form: r#"';'"#,
                     description: r#"Internal lexical symbol for "';'""#,
                },
                "[Lex-10]" ==> MetaRecceSymbol {
                     display_form: r#"'='"#,
                     dsl_form: r#"'='"#,
                     description: r#"Internal lexical symbol for "'='""#,
                },
                "[Lex-11]" ==> MetaRecceSymbol {
                     display_form: r#"'discard'"#,
                     dsl_form: r#"'discard'"#,
                     description: r#"Internal lexical symbol for "'discard'""#,
                },
                "[Lex-12]" ==> MetaRecceSymbol {
                     display_form: r#"'default'"#,
                     dsl_form: r#"'default'"#,
                     description: r#"Internal lexical symbol for "'default'""#,
                },
                "[Lex-13]" ==> MetaRecceSymbol {
                     display_form: r#"'='"#,
                     dsl_form: r#"'='"#,
                     description: r#"Internal lexical symbol for "'='""#,
                },
                "[Lex-14]" ==> MetaRecceSymbol {
                     display_form: r#"':discard'"#,
                     dsl_form: r#"':discard'"#,
                     description: r#"Internal lexical symbol for "':discard'""#,
                },
                "[Lex-15]" ==> MetaRecceSymbol {
                     display_form: r#"':lexeme'"#,
                     dsl_form: r#"':lexeme'"#,
                     description: r#"Internal lexical symbol for "':lexeme'""#,
                },
                "[Lex-16]" ==> MetaRecceSymbol {
                     display_form: r#"'event'"#,
                     dsl_form: r#"'event'"#,
                     description: r#"Internal lexical symbol for "'event'""#,
                },
                "[Lex-17]" ==> MetaRecceSymbol {
                     display_form: r#"'='"#,
                     dsl_form: r#"'='"#,
                     description: r#"Internal lexical symbol for "'='""#,
                },
                "[Lex-18]" ==> MetaRecceSymbol {
                     display_form: r#"'completed'"#,
                     dsl_form: r#"'completed'"#,
                     description: r#"Internal lexical symbol for "'completed'""#,
                },
                "[Lex-19]" ==> MetaRecceSymbol {
                     display_form: r#"'event'"#,
                     dsl_form: r#"'event'"#,
                     description: r#"Internal lexical symbol for "'event'""#,
                },
                "[Lex-1]" ==> MetaRecceSymbol {
                     display_form: r#"'{'"#,
                     dsl_form: r#"'{'"#,
                     description: r#"Internal lexical symbol for "'{'""#,
                },
                "[Lex-20]" ==> MetaRecceSymbol {
                     display_form: r#"'='"#,
                     dsl_form: r#"'='"#,
                     description: r#"Internal lexical symbol for "'='""#,
                },
                "[Lex-21]" ==> MetaRecceSymbol {
                     display_form: r#"'nulled'"#,
                     dsl_form: r#"'nulled'"#,
                     description: r#"Internal lexical symbol for "'nulled'""#,
                },
                "[Lex-22]" ==> MetaRecceSymbol {
                     display_form: r#"'event'"#,
                     dsl_form: r#"'event'"#,
                     description: r#"Internal lexical symbol for "'event'""#,
                },
                "[Lex-23]" ==> MetaRecceSymbol {
                     display_form: r#"'='"#,
                     dsl_form: r#"'='"#,
                     description: r#"Internal lexical symbol for "'='""#,
                },
                "[Lex-24]" ==> MetaRecceSymbol {
                     display_form: r#"'predicted'"#,
                     dsl_form: r#"'predicted'"#,
                     description: r#"Internal lexical symbol for "'predicted'""#,
                },
                "[Lex-25]" ==> MetaRecceSymbol {
                     display_form: r#"'current'"#,
                     dsl_form: r#"'current'"#,
                     description: r#"Internal lexical symbol for "'current'""#,
                },
                "[Lex-26]" ==> MetaRecceSymbol {
                     display_form: r#"'lexer'"#,
                     dsl_form: r#"'lexer'"#,
                     description: r#"Internal lexical symbol for "'lexer'""#,
                },
                "[Lex-27]" ==> MetaRecceSymbol {
                     display_form: r#"'is'"#,
                     dsl_form: r#"'is'"#,
                     description: r#"Internal lexical symbol for "'is'""#,
                },
                "[Lex-28]" ==> MetaRecceSymbol {
                     display_form: r#"'inaccessible'"#,
                     dsl_form: r#"'inaccessible'"#,
                     description: r#"Internal lexical symbol for "'inaccessible'""#,
                },
                "[Lex-29]" ==> MetaRecceSymbol {
                     display_form: r#"'is'"#,
                     dsl_form: r#"'is'"#,
                     description: r#"Internal lexical symbol for "'is'""#,
                },
                "[Lex-2]" ==> MetaRecceSymbol {
                     display_form: r#"'}'"#,
                     dsl_form: r#"'}'"#,
                     description: r#"Internal lexical symbol for "'}'""#,
                },
                "[Lex-30]" ==> MetaRecceSymbol {
                     display_form: r#"'by'"#,
                     dsl_form: r#"'by'"#,
                     description: r#"Internal lexical symbol for "'by'""#,
                },
                "[Lex-31]" ==> MetaRecceSymbol {
                     display_form: r#"'default'"#,
                     dsl_form: r#"'default'"#,
                     description: r#"Internal lexical symbol for "'default'""#,
                },
                "[Lex-32]" ==> MetaRecceSymbol {
                     display_form: r#"'warn'"#,
                     dsl_form: r#"'warn'"#,
                     description: r#"Internal lexical symbol for "'warn'""#,
                },
                "[Lex-33]" ==> MetaRecceSymbol {
                     display_form: r#"'ok'"#,
                     dsl_form: r#"'ok'"#,
                     description: r#"Internal lexical symbol for "'ok'""#,
                },
                "[Lex-34]" ==> MetaRecceSymbol {
                     display_form: r#"'fatal'"#,
                     dsl_form: r#"'fatal'"#,
                     description: r#"Internal lexical symbol for "'fatal'""#,
                },
                "[Lex-35]" ==> MetaRecceSymbol {
                     display_form: r#"','"#,
                     dsl_form: r#"','"#,
                     description: r#"Internal lexical symbol for "','""#,
                },
                "[Lex-36]" ==> MetaRecceSymbol {
                     display_form: r#"'action'"#,
                     dsl_form: r#"'action'"#,
                     description: r#"Internal lexical symbol for "'action'""#,
                },
                "[Lex-37]" ==> MetaRecceSymbol {
                     display_form: r#"'=>'"#,
                     dsl_form: r#"'=>'"#,
                     description: r#"Internal lexical symbol for "'=>'""#,
                },
                "[Lex-38]" ==> MetaRecceSymbol {
                     display_form: r#"'assoc'"#,
                     dsl_form: r#"'assoc'"#,
                     description: r#"Internal lexical symbol for "'assoc'""#,
                },
                "[Lex-39]" ==> MetaRecceSymbol {
                     display_form: r#"'=>'"#,
                     dsl_form: r#"'=>'"#,
                     description: r#"Internal lexical symbol for "'=>'""#,
                },
                "[Lex-3]" ==> MetaRecceSymbol {
                     display_form: r#"':start'"#,
                     dsl_form: r#"':start'"#,
                     description: r#"Internal lexical symbol for "':start'""#,
                },
                "[Lex-40]" ==> MetaRecceSymbol {
                     display_form: r#"'left'"#,
                     dsl_form: r#"'left'"#,
                     description: r#"Internal lexical symbol for "'left'""#,
                },
                "[Lex-41]" ==> MetaRecceSymbol {
                     display_form: r#"'assoc'"#,
                     dsl_form: r#"'assoc'"#,
                     description: r#"Internal lexical symbol for "'assoc'""#,
                },
                "[Lex-42]" ==> MetaRecceSymbol {
                     display_form: r#"'=>'"#,
                     dsl_form: r#"'=>'"#,
                     description: r#"Internal lexical symbol for "'=>'""#,
                },
                "[Lex-43]" ==> MetaRecceSymbol {
                     display_form: r#"'right'"#,
                     dsl_form: r#"'right'"#,
                     description: r#"Internal lexical symbol for "'right'""#,
                },
                "[Lex-44]" ==> MetaRecceSymbol {
                     display_form: r#"'assoc'"#,
                     dsl_form: r#"'assoc'"#,
                     description: r#"Internal lexical symbol for "'assoc'""#,
                },
                "[Lex-45]" ==> MetaRecceSymbol {
                     display_form: r#"'=>'"#,
                     dsl_form: r#"'=>'"#,
                     description: r#"Internal lexical symbol for "'=>'""#,
                },
                "[Lex-46]" ==> MetaRecceSymbol {
                     display_form: r#"'group'"#,
                     dsl_form: r#"'group'"#,
                     description: r#"Internal lexical symbol for "'group'""#,
                },
                "[Lex-47]" ==> MetaRecceSymbol {
                     display_form: r#"'separator'"#,
                     dsl_form: r#"'separator'"#,
                     description: r#"Internal lexical symbol for "'separator'""#,
                },
                "[Lex-48]" ==> MetaRecceSymbol {
                     display_form: r#"'=>'"#,
                     dsl_form: r#"'=>'"#,
                     description: r#"Internal lexical symbol for "'=>'""#,
                },
                "[Lex-49]" ==> MetaRecceSymbol {
                     display_form: r#"'proper'"#,
                     dsl_form: r#"'proper'"#,
                     description: r#"Internal lexical symbol for "'proper'""#,
                },
                "[Lex-4]" ==> MetaRecceSymbol {
                     display_form: r#"'start'"#,
                     dsl_form: r#"'start'"#,
                     description: r#"Internal lexical symbol for "'start'""#,
                },
                "[Lex-50]" ==> MetaRecceSymbol {
                     display_form: r#"'=>'"#,
                     dsl_form: r#"'=>'"#,
                     description: r#"Internal lexical symbol for "'=>'""#,
                },
                "[Lex-51]" ==> MetaRecceSymbol {
                     display_form: r#"'rank'"#,
                     dsl_form: r#"'rank'"#,
                     description: r#"Internal lexical symbol for "'rank'""#,
                },
                "[Lex-52]" ==> MetaRecceSymbol {
                     display_form: r#"'=>'"#,
                     dsl_form: r#"'=>'"#,
                     description: r#"Internal lexical symbol for "'=>'""#,
                },
                "[Lex-53]" ==> MetaRecceSymbol {
                     display_form: r#"'null-ranking'"#,
                     dsl_form: r#"'null-ranking'"#,
                     description: r#"Internal lexical symbol for "'null-ranking'""#,
                },
                "[Lex-54]" ==> MetaRecceSymbol {
                     display_form: r#"'=>'"#,
                     dsl_form: r#"'=>'"#,
                     description: r#"Internal lexical symbol for "'=>'""#,
                },
                "[Lex-55]" ==> MetaRecceSymbol {
                     display_form: r#"'null'"#,
                     dsl_form: r#"'null'"#,
                     description: r#"Internal lexical symbol for "'null'""#,
                },
                "[Lex-56]" ==> MetaRecceSymbol {
                     display_form: r#"'rank'"#,
                     dsl_form: r#"'rank'"#,
                     description: r#"Internal lexical symbol for "'rank'""#,
                },
                "[Lex-57]" ==> MetaRecceSymbol {
                     display_form: r#"'=>'"#,
                     dsl_form: r#"'=>'"#,
                     description: r#"Internal lexical symbol for "'=>'""#,
                },
                "[Lex-58]" ==> MetaRecceSymbol {
                     display_form: r#"'low'"#,
                     dsl_form: r#"'low'"#,
                     description: r#"Internal lexical symbol for "'low'""#,
                },
                "[Lex-59]" ==> MetaRecceSymbol {
                     display_form: r#"'high'"#,
                     dsl_form: r#"'high'"#,
                     description: r#"Internal lexical symbol for "'high'""#,
                },
                "[Lex-5]" ==> MetaRecceSymbol {
                     display_form: r#"'symbol'"#,
                     dsl_form: r#"'symbol'"#,
                     description: r#"Internal lexical symbol for "'symbol'""#,
                },
                "[Lex-60]" ==> MetaRecceSymbol {
                     display_form: r#"'priority'"#,
                     dsl_form: r#"'priority'"#,
                     description: r#"Internal lexical symbol for "'priority'""#,
                },
                "[Lex-61]" ==> MetaRecceSymbol {
                     display_form: r#"'=>'"#,
                     dsl_form: r#"'=>'"#,
                     description: r#"Internal lexical symbol for "'=>'""#,
                },
                "[Lex-62]" ==> MetaRecceSymbol {
                     display_form: r#"'pause'"#,
                     dsl_form: r#"'pause'"#,
                     description: r#"Internal lexical symbol for "'pause'""#,
                },
                "[Lex-63]" ==> MetaRecceSymbol {
                     display_form: r#"'=>'"#,
                     dsl_form: r#"'=>'"#,
                     description: r#"Internal lexical symbol for "'=>'""#,
                },
                "[Lex-64]" ==> MetaRecceSymbol {
                     display_form: r#"'event'"#,
                     dsl_form: r#"'event'"#,
                     description: r#"Internal lexical symbol for "'event'""#,
                },
                "[Lex-65]" ==> MetaRecceSymbol {
                     display_form: r#"'=>'"#,
                     dsl_form: r#"'=>'"#,
                     description: r#"Internal lexical symbol for "'=>'""#,
                },
                "[Lex-66]" ==> MetaRecceSymbol {
                     display_form: r#"'='"#,
                     dsl_form: r#"'='"#,
                     description: r#"Internal lexical symbol for "'='""#,
                },
                "[Lex-67]" ==> MetaRecceSymbol {
                     display_form: r#"'on'"#,
                     dsl_form: r#"'on'"#,
                     description: r#"Internal lexical symbol for "'on'""#,
                },
                "[Lex-68]" ==> MetaRecceSymbol {
                     display_form: r#"'off'"#,
                     dsl_form: r#"'off'"#,
                     description: r#"Internal lexical symbol for "'off'""#,
                },
                "[Lex-69]" ==> MetaRecceSymbol {
                     display_form: r#"'forgiving'"#,
                     dsl_form: r#"'forgiving'"#,
                     description: r#"Internal lexical symbol for "'forgiving'""#,
                },
                "[Lex-6]" ==> MetaRecceSymbol {
                     display_form: r#"'is'"#,
                     dsl_form: r#"'is'"#,
                     description: r#"Internal lexical symbol for "'is'""#,
                },
                "[Lex-70]" ==> MetaRecceSymbol {
                     display_form: r#"'=>'"#,
                     dsl_form: r#"'=>'"#,
                     description: r#"Internal lexical symbol for "'=>'""#,
                },
                "[Lex-71]" ==> MetaRecceSymbol {
                     display_form: r#"'latm'"#,
                     dsl_form: r#"'latm'"#,
                     description: r#"Internal lexical symbol for "'latm'""#,
                },
                "[Lex-72]" ==> MetaRecceSymbol {
                     display_form: r#"'=>'"#,
                     dsl_form: r#"'=>'"#,
                     description: r#"Internal lexical symbol for "'=>'""#,
                },
                "[Lex-73]" ==> MetaRecceSymbol {
                     display_form: r#"'bless'"#,
                     dsl_form: r#"'bless'"#,
                     description: r#"Internal lexical symbol for "'bless'""#,
                },
                "[Lex-74]" ==> MetaRecceSymbol {
                     display_form: r#"'=>'"#,
                     dsl_form: r#"'=>'"#,
                     description: r#"Internal lexical symbol for "'=>'""#,
                },
                "[Lex-75]" ==> MetaRecceSymbol {
                     display_form: r#"'name'"#,
                     dsl_form: r#"'name'"#,
                     description: r#"Internal lexical symbol for "'name'""#,
                },
                "[Lex-76]" ==> MetaRecceSymbol {
                     display_form: r#"'=>'"#,
                     dsl_form: r#"'=>'"#,
                     description: r#"Internal lexical symbol for "'=>'""#,
                },
                "[Lex-77]" ==> MetaRecceSymbol {
                     display_form: r#"'('"#,
                     dsl_form: r#"'('"#,
                     description: r#"Internal lexical symbol for "'('""#,
                },
                "[Lex-78]" ==> MetaRecceSymbol {
                     display_form: r#"')'"#,
                     dsl_form: r#"')'"#,
                     description: r#"Internal lexical symbol for "')'""#,
                },
                "[Lex-79]" ==> MetaRecceSymbol {
                     display_form: r#"'*'"#,
                     dsl_form: r#"'*'"#,
                     description: r#"Internal lexical symbol for "'*'""#,
                },
                "[Lex-7]" ==> MetaRecceSymbol {
                     display_form: r#"':default'"#,
                     dsl_form: r#"':default'"#,
                     description: r#"Internal lexical symbol for "':default'""#,
                },
                "[Lex-80]" ==> MetaRecceSymbol {
                     display_form: r#"'+'"#,
                     dsl_form: r#"'+'"#,
                     description: r#"Internal lexical symbol for "'+'""#,
                },
                "[Lex-8]" ==> MetaRecceSymbol {
                     display_form: r#"'lexeme'"#,
                     dsl_form: r#"'lexeme'"#,
                     description: r#"Internal lexical symbol for "'lexeme'""#,
                },
                "[Lex-9]" ==> MetaRecceSymbol {
                     display_form: r#"'default'"#,
                     dsl_form: r#"'default'"#,
                     description: r#"Internal lexical symbol for "'default'""#,
                },
                "[[']]" ==> MetaRecceSymbol {
                     display_form: r#"[']"#,
                     dsl_form: r#"[']"#,
                     description: r#"Character class: [']"#,
                },
                "[[+-]]" ==> MetaRecceSymbol {
                     display_form: r#"[+-]"#,
                     dsl_form: r#"[+-]"#,
                     description: r#"Character class: [+-]"#,
                },
                "[[,]]" ==> MetaRecceSymbol {
                     display_form: r#"[,]"#,
                     dsl_form: r#"[,]"#,
                     description: r#"Character class: [,]"#,
                },
                "[[01]]" ==> MetaRecceSymbol {
                     display_form: r#"[01]"#,
                     dsl_form: r#"[01]"#,
                     description: r#"Character class: [01]"#,
                },
                "[[1]]" ==> MetaRecceSymbol {
                     display_form: r#"[1]"#,
                     dsl_form: r#"[1]"#,
                     description: r#"Character class: [1]"#,
                },
                "[[[:alnum:]]]" ==> MetaRecceSymbol {
                     display_form: r#"[[:alnum:]]"#,
                     dsl_form: r#"[[:alnum:]]"#,
                     description: r#"Character class: [[:alnum:]]"#,
                },
                "[[\\#]]" ==> MetaRecceSymbol {
                     display_form: r#""#,
                     dsl_form: r#""#,
                     description: r#""#,
                },
                "[[\\(]]" ==> MetaRecceSymbol {
                     display_form: r#""#,
                     dsl_form: r#""#,
                     description: r#""#,
                },
                "[[\\)]]" ==> MetaRecceSymbol {
                     display_form: r#""#,
                     dsl_form: r#""#,
                     description: r#""#,
                },
                "[[\\*]]" ==> MetaRecceSymbol {
                     display_form: r#""#,
                     dsl_form: r#""#,
                     description: r#""#,
                },
                "[[\\+]]" ==> MetaRecceSymbol {
                     display_form: r#""#,
                     dsl_form: r#""#,
                     description: r#""#,
                },
                "[[\\,]]" ==> MetaRecceSymbol {
                     display_form: r#""#,
                     dsl_form: r#""#,
                     description: r#""#,
                },
                "[[\\-]]" ==> MetaRecceSymbol {
                     display_form: r#""#,
                     dsl_form: r#""#,
                     description: r#""#,
                },
                "[[\\:]]" ==> MetaRecceSymbol {
                     display_form: r#""#,
                     dsl_form: r#""#,
                     description: r#""#,
                },
                "[[\\;]]" ==> MetaRecceSymbol {
                     display_form: r#""#,
                     dsl_form: r#""#,
                     description: r#""#,
                },
                "[[\\<]]" ==> MetaRecceSymbol {
                     display_form: r#""#,
                     dsl_form: r#""#,
                     description: r#""#,
                },
                "[[\\=]]" ==> MetaRecceSymbol {
                     display_form: r#""#,
                     dsl_form: r#""#,
                     description: r#""#,
                },
                "[[\\>]]" ==> MetaRecceSymbol {
                     display_form: r#""#,
                     dsl_form: r#""#,
                     description: r#""#,
                },
                "[[\\[]]" ==> MetaRecceSymbol {
                     display_form: r#""#,
                     dsl_form: r#""#,
                     description: r#""#,
                },
                "[[\\\\]]" ==> MetaRecceSymbol {
                     display_form: r#""#,
                     dsl_form: r#""#,
                     description: r#""#,
                },
                "[[\\]]]" ==> MetaRecceSymbol {
                     display_form: r#""#,
                     dsl_form: r#""#,
                     description: r#""#,
                },
                "[[\\^]]" ==> MetaRecceSymbol {
                     display_form: r#""#,
                     dsl_form: r#""#,
                     description: r#""#,
                },
                "[[\\d]]" ==> MetaRecceSymbol {
                     display_form: r#""#,
                     dsl_form: r#""#,
                     description: r#""#,
                },
                "[[\\s\\w]]" ==> MetaRecceSymbol {
                     display_form: r#""#,
                     dsl_form: r#""#,
                     description: r#""#,
                },
                "[[\\s]]" ==> MetaRecceSymbol {
                     display_form: r#""#,
                     dsl_form: r#""#,
                     description: r#""#,
                },
                "[[\\w]]" ==> MetaRecceSymbol {
                     display_form: r#""#,
                     dsl_form: r#""#,
                     description: r#""#,
                },
                "[[\\u{A}\\u{B}\\u{C}\\u{D}\\u{2028}\\u{2029}]]" ==> MetaRecceSymbol {
                     display_form: r#""#,
                     dsl_form: r#""#,
                     description: r#""#,
                },
                "[[\\{]]" ==> MetaRecceSymbol {
                     display_form: r#""#,
                     dsl_form: r#""#,
                     description: r#""#,
                },
                "[[\\|]]" ==> MetaRecceSymbol {
                     display_form: r#""#,
                     dsl_form: r#""#,
                     description: r#""#,
                },
                "[[\\}]]" ==> MetaRecceSymbol {
                     display_form: r#""#,
                     dsl_form: r#""#,
                     description: r#""#,
                },
                "[[\\~]]" ==> MetaRecceSymbol {
                     display_form: r#""#,
                     dsl_form: r#""#,
                     description: r#""#,
                },
                "[[^'\\u{0A}\\u{0B}\\u{0C}\\u{0D}\\u{0085}\\u{2028}\\u{2029}]]" ==> MetaRecceSymbol {
                     display_form: r#""#,
                     dsl_form: r#""#,
                     description: r#""#,
                },
                "[[^\\u{5d}\\u{0A}\\u{0B}\\u{0C}\\u{0D}\\u{0085}\\u{2028}\\u{2029}]]" ==> MetaRecceSymbol {
                     display_form: r#""#,
                     dsl_form: r#""#,
                     description: r#""#,
                },
                "[[^\\u{A}\\u{B}\\u{C}\\u{D}\\u{2028}\\u{2029}]]" ==> MetaRecceSymbol {
                     display_form: r#""#,
                     dsl_form: r#""#,
                     description: r#""#,
                },
                "[[a-zA-Z]]" ==> MetaRecceSymbol {
                     display_form: r#"[a-zA-Z]"#,
                     dsl_form: r#"[a-zA-Z]"#,
                     description: r#"Character class: [a-zA-Z]"#,
                },
                "[[a]]" ==> MetaRecceSymbol {
                     display_form: r#"[a]"#,
                     dsl_form: r#"[a]"#,
                     description: r#"Character class: [a]"#,
                },
                "[[b]]" ==> MetaRecceSymbol {
                     display_form: r#"[b]"#,
                     dsl_form: r#"[b]"#,
                     description: r#"Character class: [b]"#,
                },
                "[[c]]" ==> MetaRecceSymbol {
                     display_form: r#"[c]"#,
                     dsl_form: r#"[c]"#,
                     description: r#"Character class: [c]"#,
                },
                "[[d]]" ==> MetaRecceSymbol {
                     display_form: r#"[d]"#,
                     dsl_form: r#"[d]"#,
                     description: r#"Character class: [d]"#,
                },
                "[[e]]" ==> MetaRecceSymbol {
                     display_form: r#"[e]"#,
                     dsl_form: r#"[e]"#,
                     description: r#"Character class: [e]"#,
                },
                "[[f]]" ==> MetaRecceSymbol {
                     display_form: r#"[f]"#,
                     dsl_form: r#"[f]"#,
                     description: r#"Character class: [f]"#,
                },
                "[[g]]" ==> MetaRecceSymbol {
                     display_form: r#"[g]"#,
                     dsl_form: r#"[g]"#,
                     description: r#"Character class: [g]"#,
                },
                "[[h]]" ==> MetaRecceSymbol {
                     display_form: r#"[h]"#,
                     dsl_form: r#"[h]"#,
                     description: r#"Character class: [h]"#,
                },
                "[[i]]" ==> MetaRecceSymbol {
                     display_form: r#"[i]"#,
                     dsl_form: r#"[i]"#,
                     description: r#"Character class: [i]"#,
                },
                "[[k]]" ==> MetaRecceSymbol {
                     display_form: r#"[k]"#,
                     dsl_form: r#"[k]"#,
                     description: r#"Character class: [k]"#,
                },
                "[[l]]" ==> MetaRecceSymbol {
                     display_form: r#"[l]"#,
                     dsl_form: r#"[l]"#,
                     description: r#"Character class: [l]"#,
                },
                "[[m]]" ==> MetaRecceSymbol {
                     display_form: r#"[m]"#,
                     dsl_form: r#"[m]"#,
                     description: r#"Character class: [m]"#,
                },
                "[[n]]" ==> MetaRecceSymbol {
                     display_form: r#"[n]"#,
                     dsl_form: r#"[n]"#,
                     description: r#"Character class: [n]"#,
                },
                "[[o]]" ==> MetaRecceSymbol {
                     display_form: r#"[o]"#,
                     dsl_form: r#"[o]"#,
                     description: r#"Character class: [o]"#,
                },
                "[[p]]" ==> MetaRecceSymbol {
                     display_form: r#"[p]"#,
                     dsl_form: r#"[p]"#,
                     description: r#"Character class: [p]"#,
                },
                "[[r]]" ==> MetaRecceSymbol {
                     display_form: r#"[r]"#,
                     dsl_form: r#"[r]"#,
                     description: r#"Character class: [r]"#,
                },
                "[[s]]" ==> MetaRecceSymbol {
                     display_form: r#"[s]"#,
                     dsl_form: r#"[s]"#,
                     description: r#"Character class: [s]"#,
                },
                "[[t]]" ==> MetaRecceSymbol {
                     display_form: r#"[t]"#,
                     dsl_form: r#"[t]"#,
                     description: r#"Character class: [t]"#,
                },
                "[[u]]" ==> MetaRecceSymbol {
                     display_form: r#"[u]"#,
                     dsl_form: r#"[u]"#,
                     description: r#"Character class: [u]"#,
                },
                "[[v]]" ==> MetaRecceSymbol {
                     display_form: r#"[v]"#,
                     dsl_form: r#"[v]"#,
                     description: r#"Character class: [v]"#,
                },
                "[[w]]" ==> MetaRecceSymbol {
                     display_form: r#"[w]"#,
                     dsl_form: r#"[w]"#,
                     description: r#"Character class: [w]"#,
                },
                "[[x]]" ==> MetaRecceSymbol {
                     display_form: r#"[x]"#,
                     dsl_form: r#"[x]"#,
                     description: r#"Character class: [x]"#,
                },
                "[[y]]" ==> MetaRecceSymbol {
                     display_form: r#"[y]"#,
                     dsl_form: r#"[y]"#,
                     description: r#"Character class: [y]"#,
                }
        )
    }
}
// The code before this line was automatically generated by meta/slif_to_rust.pl

