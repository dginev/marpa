// The code after this line was automatically generated by meta/slif_to_rust.pl
// Date: Fri Feb  8 20:52:03 2019
use crate::grammar::Grammar;
use crate::error::Error;

/// Generates a new MetaG instance in turn used to parse SLIF sources
pub fn new() -> Result<Grammar, Error> {
  let mut g = Grammar::new()?;

  let ws_char = g.string_set(None, "\t\n\r ")?;
  let ws = g.star(None, ws_char)?;

  let sep = g.literal_string(None, "::=")?;
  let term = g.literal_string(None, ";")?;

  let lower = g.char_range(None, 'a', 'z')?;
  let upper = g.char_range(None, 'A', 'Z')?;
  let digit = g.char_range(None, '0', '9')?;

  let alpha_num = g.alternative(None, &[lower, upper, digit])?;

  let ident = g.plus(None, alpha_num)?;

  let rule = g.rule(None, &[ident, ws, sep, ws, ws, term])?;
  let rules = g.sequence(None, rule, ws_char, false, false)?;

  let start = rules;

  g.set_start(start)?;
  Ok(g)
}
// The code before this line was automatically generated by meta/slif_to_rust.pl

