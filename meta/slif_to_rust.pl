#!/usr/bin/perl
#
# adapted from sl_to_hash.pl
#
# Use as : 
# marpa$ perl meta/slif_to_rust.pl meta/metag.bnf > marpa/src/metag.rs

use 5.010001;
use strict;
use warnings;
use English qw( -no_match_vars );

# This is a 'meta' tool, so I relax some of the
# restrictions I use to guarantee portability.
use autodie;

# I expect to be run from a subdirectory in the
# development heirarchy
use lib '../../../';
use lib '../../../../blib/arch';
use Marpa::R2;

use Getopt::Long;
my $verbose         = 1;
my $help_flag       = 0;
my $result          = Getopt::Long::GetOptions(
    'help'       => \\$help_flag,
);
die "usage $PROGRAM_NAME [--help] file ...\n" if $help_flag;

my $bnf = do { local $RS = undef; \(<>) };
my $ast = Marpa::R2::Internal::MetaAST->new($bnf);
my $parse_result = $ast->ast_to_hash();

sub sort_bnf {
    my $cmp = $a->{lhs} cmp $b->{lhs};
    return $cmp if $cmp;
    my $a_rhs_length = scalar @{ $a->{rhs} };
    my $b_rhs_length = scalar @{ $b->{rhs} };
    $cmp = $a_rhs_length <=> $b_rhs_length;
    return $cmp if $cmp;
    for my $ix ( 0 .. ( $a_rhs_length - 1 ) ) {
        $cmp = $a->{rhs}->[$ix] cmp $b->{rhs}->[$ix];
        return $cmp if $cmp;
    }
    return 0;
} ## end sub sort_bnf

my %g = (
    character_classes      => $parse_result->{character_classes},
    symbols                => $parse_result->{symbols},
    discard_default_adverbs => $parse_result->{discard_default_adverbs},
    lexeme_default_adverbs => $parse_result->{lexeme_default_adverbs},
    first_lhs              => $parse_result->{first_lhs},
    start_lhs              => $parse_result->{start_lhs},
);

my @rule_sets = keys %{ $parse_result->{rules} };
for my $rule_set (@rule_sets) {
    my $aoh        = $parse_result->{rules}->{$rule_set};
    my $sorted_aoh = [ sort sort_bnf @{$aoh} ];
    $g{rules}->{$rule_set} = $sorted_aoh;
}

my $date = scalar localtime();
my $rust = <<"EOL";
// The code after this line was automatically generated by $PROGRAM_NAME
// Date: $date
use crate::grammar::Grammar;
use crate::error::Error;

/// Generates a new MetaG instance in turn used to parse SLIF sources
pub fn new() -> Result<Grammar, Error> {
  let mut g = Grammar::new()?;

  let ws_char = g.string_set(None, "\\t\\n\\r ")?;
  let ws = g.star(None, ws_char)?;

  let sep = g.literal_string(None, "::=")?;
  let term = g.literal_string(None, ";")?;

  let lower = g.char_range(None, 'a', 'z')?;
  let upper = g.char_range(None, 'A', 'Z')?;
  let digit = g.char_range(None, '0', '9')?;

  let alpha_num = g.alternative(None, &[lower, upper, digit])?;

  let ident = g.plus(None, alpha_num)?;

  let rule = g.rule(None, &[ident, ws, sep, ws, ws, term])?;
  let rules = g.sequence(None, rule, ws_char, false, false)?;

  let start = rules;

  g.set_start(start)?;
  Ok(g)
}
// The code before this line was automatically generated by $PROGRAM_NAME
EOL

# first_lhs
# rules
# character_classes
# start_lhs
# discard_default_adverbs
# lexeme_default_adverbs
# symbols

say $rust;
